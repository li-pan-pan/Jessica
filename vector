#include<iostream>
#include<vector>
using namespace std;

namespace myspace
{
	template<class _Ty>
	class vector
	{
	public:
		typedef _Ty* iterator;
	public:
		vector() :_start(nullptr), _finish(nullptr), _end(nullptr)
		{}
	public:
		size_t size()const
		{
			return _finish - _start;
		}
		size_t capacity()const
		{
			return _end - _start;
		}
		bool empty()const
		{
			return size() == 0;
		}
	public:
		iterator begin()
		{
			return _start;
		}
		iterator end()
		{
			return _finish;
		}
		void push_back(const _Ty &x)
		{
			insert(end(), x);
		}
	public:
		iterator insert(iterator _P, const _Ty&x)
		{
			int old_sz = size();
			int old_cap = capacity();

			if (old_sz + 1 > old_cap)
			{
				//空间不够，进行扩容
				size_t it_pos = _P - _start;

				size_t new_cap = old_cap == 0 ? 1 : old_cap * 2;
				reserve(new_cap);

				//更新迭代器
				_P = _start + it_pos;
			}

			//移动数据
			iterator end = _finish++;
			while (end > _P)
			{
				*end = *(end - 1);
				end--;
			}

			*_P = x;
			return _P;
		}
		void reserve(size_t n)
		{
			if (n > capacity())
			{
				int old_size = size();

				_Ty *new_base = new _Ty[n];

				if (_start)
				{
					memcpy(new_base, _start, sizeof(_Ty)*old_size);
					delete[]_start;
				}

				_start = new_base;
				_finish = _start + old_size;
				_end = _start + n;
			}
		}
		void swap(vector<_Ty>& v)
		{
			swap(_start, v._start);
			swap(_finish, v._finish);
			swap(_end, v._end);
		}
	private:
		iterator _start;
		iterator _finish;
		iterator _end;
	};
};
void main()
{
	myspace::vector<int> iv;

	cout << "size = " << iv.size() << endl;
	cout << "capacity = " << iv.capacity() << endl;

	//iv.reserve(10);
	//iv.insert(iv.begin(), 1);
	//iv.insert(iv.end(), 2);
	iv.push_back(1);
	iv.push_back(2);
	iv.push_back(3);

	cout << "size = " << iv.size() << endl;
	cout << "capacity = " << iv.capacity() << endl;

	auto it = iv.begin();
	while (it != iv.end())
	{
		cout << *it << " ";
		++it;
	}
	cout << endl;
}
